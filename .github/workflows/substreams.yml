name: Substreams Contract Reviewer

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  process-contracts:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true
      
      - name: Install Substreams CLI
        run: |
          curl -L https://github.com/streamingfast/substreams/releases/download/v1.1.0/substreams_linux_x86_64.tar.gz | tar zxf -
          chmod +x substreams
          sudo mv substreams /usr/local/bin/
      
      - name: Install jq
        run: sudo apt-get install -y jq
      
      - name: Build Substreams WASM module
        run: cargo build --target wasm32-unknown-unknown --release
      
      - name: Run Substreams
        env:
          SUBSTREAMS_API_KEY: ${{ secrets.SUBSTREAMS_API_KEY }}
        run: |
          mkdir -p output
          substreams run -e ${{ secrets.SUBSTREAMS_API_KEY }}@mainnet.eth.streamingfast.io:443 \
            substreams.yaml map_contract_usage \
            --start-block 16000000 --stop-block +1000 \
            | jq -c '.contracts[]' > ./output/contracts.json
      
      - name: Create timestamp
        id: timestamp
        run: echo "::set-output name=date::$(date +'%Y%m%d_%H%M%S')"
      
      - name: Commit and push results
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          # Create results directory if it doesn't exist
          mkdir -p results
          
          # Copy output to results directory with timestamp
          cp ./output/contracts.json ./results/contracts_${{ steps.timestamp.outputs.date }}.json
          
          # Add and commit
          git add ./results/
          git commit -m "Add contract data for ${{ steps.timestamp.outputs.date }}" || echo "No changes to commit"
          # Determine which branch we're on
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [ "$BRANCH" = "HEAD" ]; then
            # We're in detached HEAD state, use the default branch
            BRANCH="main"
          fi
          
          git push origin $BRANCH
